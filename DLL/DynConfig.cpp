
#include "stdafx.h"
#include "DynConfig.h"

// Hardcoded settings: will be replaced by NetRipper

char NETRIPPER_SETTINGS[] = 
	"<NetRipper>"
	"<process_names>"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</process_names>"
	"<process_ids>"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</process_ids>"
	"<plugins>"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</plugins>"
	"<data_path>"
	"TEMP????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</data_path>"
	"</NetRipper>";

// Class data

string DynConfig::s_sProcessNames = "ALL";
string DynConfig::s_sProcessIDs   = "";
string DynConfig::s_sPlugins      = "limit";
string DynConfig::s_sDataPath     = "TEMP";

// Read and parse configuration data

void DynConfig::Init()
{
	s_sProcessNames = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<process_names>", "</process_names>"));
	s_sProcessIDs   = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<process_ids>",   "</process_ids>"));
	s_sPlugins      = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<plugins>",       "</plugins>"));
	s_sDataPath     = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<data_path>",     "</data_path>"));
}

// Filters the ? and " " chars

string DynConfig::Filter(string p_sString)
{
	string sResult = "";

	for(size_t i = 0; i < p_sString.length(); i++)
	{
		if(p_sString[i] == '?') break;
		if(p_sString[i] == ' ') continue;

		sResult += p_sString[i];
	}

	return sResult;
}

// Get a vector with process names
// Not used at this moment
vector<string> DynConfig::GetProcessNames()
{
	vector<string> vResult;
	return vResult;
}

// Get a vector with process IDs
// Not used at this moment
vector<DWORD> DynConfig::GetProcessIDs()
{
	vector<DWORD> vResult;
	return vResult;
}

// Get a vector with plugins

vector<string> DynConfig::GetPlugins()
{
	vector<string> vResult;
	return vResult;
}

// Get the data path, create folder if it does not exists

string DynConfig::GetDataPath()
{
	char buffer[MAX_TEMP_PATH] = {0};
	string sPath = "";

	// If it is default configured to use TEMP

	if(s_sDataPath.compare("TEMP") == 0)
	{
		// Get Temp path

		if(GetTempPath(MAX_TEMP_PATH, buffer) == 0)
		{
			DebugLog::DebugError("[ERROR] Cannot get temporary path to save data!");
			return "";
		}

		sPath = buffer;
		sPath = sPath + "NetRipper";
	}
	else sPath = s_sDataPath;

	// Create DIRECTORY if does not exist

	if(CreateDirectory(sPath.c_str(), NULL) == 0)
	{
		if(GetLastError() != ERROR_ALREADY_EXISTS)
		{
			DebugLog::DebugError("[ERROR] Cannot create NetRipper directory to save data!");
			return "";
		}
	}

	sPath = sPath + "\\";

	return sPath;
}
